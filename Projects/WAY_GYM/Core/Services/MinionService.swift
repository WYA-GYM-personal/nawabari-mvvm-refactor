//
//  MinionUseCase.swift
//  WAY_GYM
//
//  Created by Ïù¥Ï£ºÌòÑ on 9/12/25.
//

import Foundation
import FirebaseFirestore
import FirebaseFirestoreSwift

final class MinionService: ObservableObject {
    private var db = Firestore.firestore()
    @Published var totalDistance: Double = 0.0

    // Î∑∞ÏóêÏÑú Í¥ÄÏ∞∞Ìï† ÏÉÅÌÉúÎì§
    @Published var acquiredMinions: [(minion: MinionDefinitionModel, acquisitionDate: Date)] = []

    // ÎÇ¥Î∂Ä ÏùòÏ°¥ÏÑ± (Îü∞ Í∏∞Î°ù)
    let runRecordService: RunRecordService
    private let minionModel = MinionModel()

    // MARK: - Init
    init(runRecordVM: RunRecordService = RunRecordService()) {
        self.runRecordService = runRecordVM
        minionModel.loadMinionsDB()
    }
    
    // MARK: - Unlock Í∏∞Ï§Ä (km ‚Üí m Î≥ÄÌôò ÎπÑÍµê)
    func isUnlocked(_ minion: MinionDefinitionModel, with distanceValue: Int) -> Bool {
        return Double(distanceValue) >= minion.unlockNumber * 1000
    }

    // MARK: - ÌöçÎìù ÎÇ†Ïßú Í≥ÑÏÇ∞(Ïä§ÎßàÌä∏)
    // ÎØ∏ÎãàÏñ∏ Î¶¨Ïä§Ìä∏ Î∑∞, ÎØ∏ÎãàÏñ∏ Ïã±Í∏Ä Î∑∞ÏóêÏÑú ÏÇ¨Ïö©
    /// 1) Î°úÏª¨ runRecordsÍ∞Ä ÏûàÏúºÎ©¥ Ï¶âÏãú Í≥ÑÏÇ∞
    /// 2) ÏóÜÏúºÎ©¥ FirestoreÏóêÏÑú ÏµúÏã† Í∏∞Î°ùÏùÑ Î∂àÎü¨ÏôÄ Í≥ÑÏÇ∞
    /// - Note: unlockNumberÎäî km Îã®ÏúÑÏù¥ÎØÄÎ°ú m(ÎØ∏ÌÑ∞)Î°ú Î≥ÄÌôòÌï¥ÏÑú ÎπÑÍµê
    func acquisitionDateSmart(for minion: MinionDefinitionModel, completion: @escaping (Date?) -> Void) {
        let unlockInMeters = minion.unlockNumber * 1000

        // 1) Î°úÏª¨ Ï∫êÏãú ÏÇ¨Ïö©
        let localRecords = runRecordService.runRecords
        if !localRecords.isEmpty {
            let sorted = localRecords.sorted { $0.startTime < $1.startTime }
            var cumulative: Double = 0
            for record in sorted {
                cumulative += record.distance
                if cumulative >= unlockInMeters {
                    completion(record.startTime)
                    return
                }
            }
            completion(nil)
            return
        }

        // 2) ÏÑúÎ≤ÑÏóêÏÑú ÏµúÏã† Í∏∞Î°ù Î°úÎìú(Firestore)
        let db = Firestore.firestore()
        db.collection("RunRecordModels")
            .getDocuments { snapshot, error in
                guard let documents = snapshot?.documents else {
                    print("‚ö†Ô∏è Í∏∞Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®: \(error?.localizedDescription ?? "")")
                    completion(nil)
                    return
                }

                let records: [(distance: Double, startTime: Date)] = documents.compactMap { doc in
                    let data = doc.data()
                    guard let startTs = data["start_time"] as? Timestamp else { return nil }
                    let start = startTs.dateValue()

                    if let dist = data["distance"] as? Double {
                        return (dist, start)
                    } else if let distInt = data["distance"] as? Int {
                        return (Double(distInt), start)
                    } else {
                        return nil
                    }
                }

                let sorted = records.sorted { $0.startTime < $1.startTime }
                var cumulative: Double = 0
                for r in sorted {
                    cumulative += r.distance
                    if cumulative >= unlockInMeters {
                        completion(r.startTime)
                        return
                    }
                }
                completion(nil)
            }
    }

    // MARK: - Îü∞Îãù ÏßÅÌõÑ: ÏÉàÎ°ú ÌöçÎìùÌïú ÎØ∏ÎãàÏñ∏ ÌôïÏù∏
    func checkMinionUnlockOnStop(completion: @escaping ([MinionDefinitionModel]) -> Void) {
        let db = Firestore.firestore()
        db.collection("RunRecordModels")
            .getDocuments { snapshot, error in
                guard let documents = snapshot?.documents else {
                    print("‚ö†Ô∏è Í∏∞Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®: \(error?.localizedDescription ?? "")")
                    completion([])
                    return
                }

                let records: [(distance: Double, startTime: Timestamp)] = documents.compactMap { doc in
                    let data = doc.data()
                    guard let distance = data["distance"] as? Double,
                          let startTime = data["start_time"] as? Timestamp else {
                        print("‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞ ÎàÑÎùΩ ÎòêÎäî ÌÉÄÏûÖ Î∂àÏùºÏπò in \(doc.documentID)")
                        return nil
                    }
                    return (distance, startTime)
                }

                let sorted = records.sorted { $0.startTime.dateValue() > $1.startTime.dateValue() }

                guard let latestRecord = sorted.first else {
                    print("‚ö†Ô∏è Í∏∞Î°ù ÏóÜÏùå")
                    completion([])
                    return
                }

                let currentTotal = records.map { $0.distance }.reduce(0, +)
                let prevTotal = currentTotal - latestRecord.distance

                print("Í±∞Î¶¨ üìè Ï¥ù: \(currentTotal), Ï¥ù-ÏµúÏã† Í∏∞Î°ù: \(prevTotal)")

                var newlyUnlockedMinions: [MinionDefinitionModel] = []

                for minion in MinionModel.allMinions {
                    let unlock = minion.unlockNumber * 1000

                    let wasLockedBefore = prevTotal < unlock
                    let isUnlockedNow = currentTotal >= unlock

                    if wasLockedBefore && isUnlockedNow {
                        newlyUnlockedMinions.append(minion)
                    }
                }

                completion(newlyUnlockedMinions)
            }
    }

    // MARK: - ÏµúÍ∑º ÌöçÎìù ÎØ∏ÎãàÏñ∏ (ÌîÑÎ°úÌïÑÏö©): Ï¥ù ÎàÑÏ†Å Í±∞Î¶¨ Í∏∞Î∞ò
    // ÎØ∏ÎãàÏñ∏ Î¶¨Ïä§Ìä∏ Î∑∞, ÌîÑÎ°úÌïÑ ÎØ∏ÎãàÏñ∏ Î∑∞ÏóêÏÑú ÏÇ¨Ïö©
    func fetchRecentUnlockedMinions(runRecordVM runRecordService: RunRecordService,
                                    completion: @escaping ([(minion: MinionDefinitionModel, acquisitionDate: Date)]) -> Void) {
        runRecordService.getTotalDistanceForRewards { total in
            let unlockedMinions = MinionModel.allMinions.filter {
                self.isUnlocked($0, with: Int(total))
            }
            let sorted = unlockedMinions
                .sorted { Int($0.id) ?? 0 < Int($1.id) ?? 0 }
                .suffix(3)
            let result = sorted.map { (minion: $0, acquisitionDate: Date()) }
            completion(result)
        }
    }

    // Í∏∞Ï°¥ Ìï®Ïàò Ïû¨ÏÇ¨Ïö©: suffix(3) Ï†úÍ±∞ + ÎÇ¥Î∂Ä runRecordVM ÏÇ¨Ïö©
    // ÌîÑÎ°úÌïÑ ÎØ∏ÎãàÏñ∏ Î∑∞ÏóêÏÑú ÏÇ¨Ïö©
    func fetchRecentUnlockedMinions() {
        runRecordService.getTotalDistanceForRewards { total in
            let unlocked = MinionModel.allMinions.filter {
                self.isUnlocked($0, with: Int(total))
            }
            // Ï†ïÎ†¨ Í∏∞Ï§ÄÏùÑ unlockNumber(ÏöîÍµ¨ km) Ïò§Î¶ÑÏ∞®ÏàúÏúºÎ°ú Ï†ïÎ†¨
            let sorted = unlocked.sorted { $0.unlockNumber < $1.unlockNumber }
            let result = sorted.map { (minion: $0, acquisitionDate: Date()) }

            DispatchQueue.main.async {
                self.acquiredMinions = result
            }
        }
    }

}
